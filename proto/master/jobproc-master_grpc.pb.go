// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/jobproc-master.proto

package master

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobProcessorClient is the client API for JobProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobProcessorClient interface {
	GetJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*JobStatus, error)
	RunJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobStatus, error)
	CancelJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*JobStatus, error)
	RemoveJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*JobStatus, error)
	RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*RegisterStatus, error)
	Heartbeat(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type jobProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewJobProcessorClient(cc grpc.ClientConnInterface) JobProcessorClient {
	return &jobProcessorClient{cc}
}

func (c *jobProcessorClient) GetJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/proto.JobProcessor/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobProcessorClient) RunJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/proto.JobProcessor/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobProcessorClient) CancelJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/proto.JobProcessor/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobProcessorClient) RemoveJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/proto.JobProcessor/RemoveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobProcessorClient) RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*RegisterStatus, error) {
	out := new(RegisterStatus)
	err := c.cc.Invoke(ctx, "/proto.JobProcessor/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobProcessorClient) Heartbeat(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.JobProcessor/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobProcessorServer is the server API for JobProcessor service.
// All implementations must embed UnimplementedJobProcessorServer
// for forward compatibility
type JobProcessorServer interface {
	GetJob(context.Context, *JobId) (*JobStatus, error)
	RunJob(context.Context, *JobRequest) (*JobStatus, error)
	CancelJob(context.Context, *JobId) (*JobStatus, error)
	RemoveJob(context.Context, *JobId) (*JobStatus, error)
	RegisterWorker(context.Context, *WorkerInfo) (*RegisterStatus, error)
	Heartbeat(context.Context, *WorkerInfo) (*emptypb.Empty, error)
	mustEmbedUnimplementedJobProcessorServer()
}

// UnimplementedJobProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedJobProcessorServer struct {
}

func (UnimplementedJobProcessorServer) GetJob(context.Context, *JobId) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedJobProcessorServer) RunJob(context.Context, *JobRequest) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedJobProcessorServer) CancelJob(context.Context, *JobId) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedJobProcessorServer) RemoveJob(context.Context, *JobId) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJob not implemented")
}
func (UnimplementedJobProcessorServer) RegisterWorker(context.Context, *WorkerInfo) (*RegisterStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedJobProcessorServer) Heartbeat(context.Context, *WorkerInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedJobProcessorServer) mustEmbedUnimplementedJobProcessorServer() {}

// UnsafeJobProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobProcessorServer will
// result in compilation errors.
type UnsafeJobProcessorServer interface {
	mustEmbedUnimplementedJobProcessorServer()
}

func RegisterJobProcessorServer(s grpc.ServiceRegistrar, srv JobProcessorServer) {
	s.RegisterService(&JobProcessor_ServiceDesc, srv)
}

func _JobProcessor_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobProcessorServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobProcessor/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobProcessorServer).GetJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobProcessor_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobProcessorServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobProcessor/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobProcessorServer).RunJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobProcessor_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobProcessorServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobProcessor/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobProcessorServer).CancelJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobProcessor_RemoveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobProcessorServer).RemoveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobProcessor/RemoveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobProcessorServer).RemoveJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobProcessor_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobProcessorServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobProcessor/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobProcessorServer).RegisterWorker(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobProcessor_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobProcessorServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobProcessor/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobProcessorServer).Heartbeat(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// JobProcessor_ServiceDesc is the grpc.ServiceDesc for JobProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JobProcessor",
	HandlerType: (*JobProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _JobProcessor_GetJob_Handler,
		},
		{
			MethodName: "RunJob",
			Handler:    _JobProcessor_RunJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _JobProcessor_CancelJob_Handler,
		},
		{
			MethodName: "RemoveJob",
			Handler:    _JobProcessor_RemoveJob_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _JobProcessor_RegisterWorker_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _JobProcessor_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/jobproc-master.proto",
}
